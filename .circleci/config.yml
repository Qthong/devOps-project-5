# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  verify-syntax:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run: 
          name: "create venv"
          command: |
            python3 -m venv ~/.devops
      - run:
          name: "Check syntaxt"
          command: |
            make install
            make lint

  build-test:
    docker:
      - image: maven:3.6.3-jdk-11
    steps:
      - checkout
      - run:
          name: package code
          command: mvn clean install test

  build-push-iamge:
    docker:
      - image: docker:17.05.0-ce-git  
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache py-pip=9.0.0-r1
      - run:
          name: Build and push Docker image
          command: |
            docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD     
            docker build  -t thongnq2/dev-ops-project-5:${CIRCLE_WORKFLOW_ID:0:7} .      
            docker push "thongnq2/dev-ops-project-5:${CIRCLE_WORKFLOW_ID:0:7}"

  setup-eks-cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: install eksctl
          command: |
            ARCH=amd64
            PLATFORM=$(uname -s)_$ARCH
            curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
            tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
            mv /tmp/eksctl /usr/local/bin

      - run: 
          name: Create cluster if not exist
          command: |
            if eksctl get cluster --region=us-east-1 --name "my-cluster"
            then
              echo "Cluster my-cluster is exist"
            else
              eksctl create cluster --region=us-east-1 --name "my-cluster"
            fi

  deploy:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: init config kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            aws eks update-kubeconfig --region us-east-1  --name my-cluster      
            kubectl run cloud-devops-project5-${CIRCLE_WORKFLOW_ID:0:7} --image="thongnq2/dev-ops-project-5:${CIRCLE_WORKFLOW_ID:0:7}" --port 80
            kubectl expose pod cloud-devops-project5-${CIRCLE_WORKFLOW_ID:0:7} --type=LoadBalancer --port=8080
            sleep 1m
      - run:
          name: extract IP address of app
          command: |
            cd .circleci
            
            ip_address=$(kubectl get services cloud-devops-project5-${CIRCLE_WORKFLOW_ID:0:7} --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo $ip_address >> ip_address.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ip_address.txt
  
  smoke-test:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Smoke test.
          command: |
              cd .circleci
            
              export APP_IP=$(cat ip_address.txt)
              
              export APP_ENDPOINT="http://${APP_IP}:8080/"

              sleep 30s
              if curl ${APP_ENDPOINT} | grep "hello"
              then
                exit 0
              else
                exit 1
              fi

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            aws eks update-kubeconfig --region us-east-1  --name my-cluster
      - run:
          name: Get services in kubectl
          command: |
            kubectl get svc | grep cloud-devops-project5 > svc.txt            
            sed 's/ .*//' svc.txt > old_svc.txt 
            SERVICE=cloud-devops-project5-${CIRCLE_WORKFLOW_ID:0:7}
            kubectl delete service $(cat old_svc.txt | sed 's/'$SERVICE'//g' | sed -r '/^\s*$/d')


workflows:
  say-hello-workflow:
    jobs:
      - verify-syntax
      - build-test:
          requires: [verify-syntax]
      - build-push-iamge:
          requires: [build-test]
      - setup-eks-cluster:
          requires: [build-push-iamge]
      - deploy:
          requires: [setup-eks-cluster]
      - smoke-test:
          requires: [deploy]
      - cleanup:
          requires: [smoke-test]

        

